08:39:37 | DEBUG    | Getting session from /home/codespace/eos/session.json
08:39:37 | DEBUG    | Getting session from /home/codespace/eos/session.json
08:39:40 | DEBUG    | Is fetched: True
08:39:40 | DEBUG    | Schema available in /home/codespace/eos/dest/eos30gr/api_schema.json
08:39:40 | DEBUG    | Setting AutoService for eos30gr
08:39:40 | INFO     | Service class provided
08:39:40 | DEBUG    | Using port 43193
08:39:40 | DEBUG    | Starting Docker Daemon service
08:39:40 | DEBUG    | Creating temporary folder /tmp/ersilia-efmncwfq and mounting as volume in container
08:39:40 | DEBUG    | Image ersiliaos/eos30gr:latest is available locally
08:39:40 | DEBUG    | Using port 45385
08:39:40 | DEBUG    | Starting Docker Daemon service
08:39:40 | DEBUG    | Creating temporary folder /tmp/ersilia-d2x00ofz and mounting as volume in container
08:39:40 | INFO     | Done with initialization!
08:39:40 | DEBUG    | No file splitting necessary!
08:39:41 | DEBUG    | Reading card from eos30gr
08:39:41 | DEBUG    | Trying to get metadata from: /home/codespace/eos/dest/eos30gr
08:39:43 | DEBUG    | Reading shape from eos30gr
08:39:43 | DEBUG    | Trying to get metadata from: /home/codespace/eos/dest/eos30gr
08:39:44 | DEBUG    | Input Shape: Single
08:39:44 | DEBUG    | Input type is: compound
08:39:44 | DEBUG    | Input shape is: Single
08:39:44 | DEBUG    | Importing module: .types.compound
08:39:44 | DEBUG    | Checking RDKIT and other requirements necessary for compound inputs
08:39:44 | DEBUG    | InputShapeSingle shape: Single
08:39:44 | DEBUG    | API eos30gr:run initialized at URL http://0.0.0.0:42983
08:39:44 | DEBUG    | Schema available in /home/codespace/eos/dest/eos30gr/api_schema.json
08:39:44 | DEBUG    | No file splitting necessary!
08:39:44 | DEBUG    | Reading card from eos30gr
08:39:44 | DEBUG    | Trying to get metadata from: /home/codespace/eos/dest/eos30gr
08:39:46 | DEBUG    | Reading shape from eos30gr
08:39:46 | DEBUG    | Trying to get metadata from: /home/codespace/eos/dest/eos30gr
08:39:47 | DEBUG    | Input Shape: Single
08:39:47 | DEBUG    | Input type is: compound
08:39:47 | DEBUG    | Input shape is: Single
08:39:47 | DEBUG    | Importing module: .types.compound
08:39:47 | DEBUG    | Checking RDKIT and other requirements necessary for compound inputs
08:39:47 | DEBUG    | InputShapeSingle shape: Single
08:39:47 | DEBUG    | API eos30gr:run initialized at URL http://0.0.0.0:42983
08:39:47 | DEBUG    | Schema available in /home/codespace/eos/dest/eos30gr/api_schema.json
08:39:47 | DEBUG    | Posting to run
08:39:47 | DEBUG    | Batch size 100
08:39:47 | DEBUG    | Schema available in /home/codespace/eos/dest/eos30gr/api_schema.json
08:39:47 | DEBUG    | Checking for already available calculations in the data lake
08:39:47 | DEBUG    | Inspecting 0...
08:39:47 | DEBUG    | Reading from data well of eos30gr
08:39:47 | DEBUG    | Expected number: 1
08:39:47 | DEBUG    | Entity is list: False
08:39:47 | DEBUG    | Resolving columns
08:39:47 | DEBUG    | Done with sniffing the file
08:39:47 | DEBUG    | Input: {2: 1, 3: 1}
08:39:47 | DEBUG    | Key: {1: 1}
08:39:47 | DEBUG    | Key: [1]
08:39:47 | DEBUG    | Input: [2]
08:39:47 | DEBUG    | Candidate header is ['0', 'IJDNQMDRQITEOD-UHFFFAOYSA-N', 'CCCC', 'CCCC']
08:39:47 | DEBUG    | Matching for input is [2]
08:39:47 | DEBUG    | Has header False
08:39:47 | DEBUG    | Schema {'input': [2], 'key': [1]}
08:39:47 | DEBUG    | Standardizing input single
08:39:47 | DEBUG    | Writing standardized input to /tmp/ersilia-5m7c8qo3/standard_input_file.csv
08:39:47 | DEBUG    | Reading standard file from /tmp/ersilia-5m7c8qo3/standard_input_file.csv
08:39:47 | DEBUG    | Schema available in /home/codespace/eos/dest/eos30gr/api_schema.json
08:39:47 | DEBUG    | Working on output: /tmp/ersilia-emjgy48p/done_output-chunk-0.json
08:39:47 | DEBUG    | Schema available in /home/codespace/eos/dest/eos30gr/api_schema.json
08:39:47 | DEBUG    | Merging 1 files into /tmp/ersilia-w8izcsc1/done_output.json
08:39:47 | DEBUG    | Rearranging and returning
08:39:47 | DEBUG    | Done with unique posting
{
    "input": {
        "key": "IJDNQMDRQITEOD-UHFFFAOYSA-N",
        "input": "CCCC",
        "text": "CCCC"
    },
    "output": {
        "outcome": null
    }
}
